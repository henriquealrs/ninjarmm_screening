1. Explain the different types of containers available in the standard library, what are their differences? Explain use cases for each.
	- vector<T>: allocates a space for a dynamic number objects of type T. Allocated objects are contained in a contiguous memory space, and the allocation is dynamic, i.e. happens on heap, and size can change in runtime. Provides random access. It is the goto container for standard needs ov vecors and arrays when size can change or is determined in runtime.
	- array<T, N>: allocates a space on the stack for N objects of T. The number N is determined in compile time and cannot be changed. Also provides random access. Should be the prefered container for when size can be determined in compile time.
	- list<T>: BY default is a doubly linked list of T type objects. The memory is not guarantied to be contiguous. It's a linked list so memory access is sequencial (cannot be random) and due to memory sparceness, to avoid cache misses I would only use when insertion and deletion performance is critical
	- stack<T>: Implements a FILO stack structure, use it when stack data structure is the correct algorithm choice.
	- queue<T>: Implements a FIFO queue structure, use it when queue data structure is the correct algorithm coice.
	- map<KeyType, ValueType>: implements an associative structure to map an unique `key` to a `values` in a ordered structure.
	- unordered_map<KeyType, ValueType> Implements an assiciative structure to map a unique `key` to an unique `value` in a hash map like data structure. Usually faster and preferable over map
	- set<T>: stores unique values T (no repetition) in an ordered maner.
	- unordered_set<T>: stores unique values T in buckets according to its hash

2. What are some sorting algorithms, list at least 3? What are their differences and give use cases for each.
	- Bubble sort: Sorts elements in O(n²) time complexity. It's simple to implement, thus good for when sorting knowinlly small lists.
	- Insertion sort: Also a quadratic O(n²) algorithm, although, if there's a good chance the array is already sorted, it runs in linear time O(n)
	- Merge sort: divide and conquer approach that runs in O(n log(n)).
	- Quick Sort: Runs in O(n²) in worst case, but is the best practical algorithm on an average random case running in  O(n log(n)) time.

3. What is the purpose of virtual destructors? What types of issues can arise if not used correctly.
	Declaring a destruct as virtual is essential when implementing inheritance for making sure that when a child object is deleted, the parend destructor is also called, thus avoiding resources leakage.

4. Explain the keyword: static. What does it mean in each context?
	- When a variable is declared static inside a function it means it's allocated on data space, and exists trhoughout the lifetime of the program, it will be initialized only once and in every function call it will refer to the same memory space (event on different threads).
	- When a function or a global variable is declared static, it means it is visible only in the scope of the source file, and will not be refered or linked from other files.
	- When a class member function or variable is declared static it means it exists in the scope of the class, not being necessary to have an object instanciated for them to be visible/usable. A static member function doesn't need an instance to be called. A static member variable is like a global variable that exists in the entirety of the program runtime.

5. When are static member variables initialized?
	The initialization has to be done outside of the class declaration body in a code space. If not explicit are initialized to 0 by default.

6. What is the difference between R-Values and L-Values?
	L-values are statement results that can be referenced, meaning they point to a memory location. R-Values, on the other hand, are results like value return from function or math statements that don't reside anywhere untill they are assigned to an L-Value.

7. Is this code safe? If so why? If not why?
	std::string foo()
	{
		std::string something = "avalue";
		return something;
	}
	
	Yes, it's safe because it's returning the string by value, so it should always make a copy.

	Bonus: What would most compilers do with this code?]
		The compiler should apply RVO copy elision, to avoid the unnecessary copy of a temporary string.

8. Why would you use new rather than malloc when allocating an object? Likewise, what's the difference between free and delete?
	When allocating an object using `new` the class/struct contructor will be called and as well as necessary v-table mapping, as oposed to `malloc` only allocating the memory space. Similarly `delete` will call destructor and virtual destructor chain, `free()` will only free the memory space from the heap. Also `new` and `delete` can be overloaded if necessary.

9. Explain the purpose of std::move, and std::forward. 
	std::move serves the purpose of implementing move semantics, when an object is moved rather than copyed, to assign a value to an r-value reference `&&`. This shall invalidate the original reference. `std::forward` will pass a function parameter by the same type (r-value or l-value) forward to another call as the function received it.

10. How do you share resources safely between threads? How would you share an integer value vs user defined type? 
	Resources should be shared idealy as atomic types, so optimizations would be turned off avoiding unexpected behavior. The risk of concurrent access should be protected by a mutex, or any other structure preventing simultaneus access to a piece of code. An integer built-in value should be enough to be protected by declaring it atomic, a user defined type cannot be atomic in case it's not trivialy copiable, so it is necessary to use mutexes and be careful with optimization traps.

11. What are the some of the principles of object-oriented programming?
	Inheritance (class can derived from another with a is-a relationship), encapsulation (class contains object to another, a has-a relationship), polimorphysm (a derived class can be treated as a base class or interface), abstracts classes (defines only an interface).

12. Explain inheritance vs composition vs aggregation?
	- Inheritance: A is a relationship between a Base class and a Derived class. i.e. in `class Base{};`  and `class Derived : public Base{}`, a Derived object is a Base object and can be treated and referenced as such
	- composition: Is a has-a relationship between classes, meaning tha an object of a class will contain one or more objects from the other class.
	- Aggregation: Sort of a composition, but the contained object has a lifecycle of its own, independently of the container. i.e the contained object can exist without the container.

13. Should you always initialize variables?
	Although the standard doesn't mandate that variables are always initialized it is good practice to do so in order to avoid surprises and runtime and memory initialization bugs.

14. What concept(s) in C++ would you use to manage resources automatically?
	Smart pointers for avoiding memory leaks (usualy store memory on the stack as much as possible), RAII
	a. How important are these concepts? 	
		Very important, for memory/resource leakages are critical in long running or resources limited applications. 
	b. What tools are you familiar with for tracking resource allocations? 
		valgrind to debug memory leaks, also had some briefe experience with GDB and Visual Studio memory tools

15. What security concerns have you come across in the past and how have you addressed them?
	Preventing buffer overflow attack. Using static code analyzers (checkmarx). Following best coding practices. Never leaving a token or passwork hardcoded.

16. Name some tools and/or techniques that you personally find to be the most helpful surrounding development.
	Thinking of what the project MVP is, and how to start implementing its core. Perf and Valgrind and Unit Testing to find problems early in feature development.
	Regularly talking to other developers and other teams to understand the context and not leaving any doubts.

17. Name some tools and/or techniques that you personally find to be the most helpful surrounding code maintenance.
	TDD (IMHO TDD is more usefull when we already have a code base and structure to attack the problems by first reproducing them via test).
	Code review.

18. Scenario: You are dealing with legacy code containing no test suites nor documented requirements, and are required to make a change. Describe your expected process for how you may approach the solution. 
	a. Consider both a long term and short-term solutions. 
		Short term solution, I my basic approach is to search for a significant part of the code that I know what it's doing (maybe a UI string, or a class performing a task) relevant to the change I have to make. Using som debug tool (logs/breakpoints) would start validating and trying to understand what the code is doing and what module is doing what and when)
		Long term I would start writting code documentation, and test suits to document the code.

19. What concerns do you had supporting legacy operating systems? (If any)
	API changes and library backward compatibility are always the bigest challenges. In embedded systems I also faced kernel incompatibility problems.

20. Tell us about a project you worked on that you found to be interesting or unusual. 
	Plugpag. A library for integrating third party apps with POS terminals via bluetooth. I was available for Linux, Windows, Android and iOS, and chared the same core C code. Also we had a Java/Kottlin JNI abstraction. It involved challenges of bluetooth syncronization, BT RF tests, app securyty (long discussions on how to ensure security of token storage). It then begame the standard library for 3P payment integration on Pagseguro's Android SmartPOS